#!/bin/sh
#
prog=updatesm
usage="usage: $prog [-n]"
#
#	Check the mother site for movies we don't have.
#
#	XXX doesn't delete old movies

export PATH=$PATH:$HOME/bin

noupdate=
while [ $# -gt 0 ]
do
	case "$1" in
	-n)	shift; noupdate=true;;
	-*)	echo "$usage" 1>&2
		exit 1;;
	*)	break
	esac
done

if [ $# -gt 0 ]
then
	echo "$usage" 1>&2
	exit 1
fi

. slowdefs	|| exit 99

cd $LOCAL_MOVIE_LIB	|| exit 1

curl -s "$MOVIE_INDEX_URL" -o index || exit 2	# our list of movies
curl -s "$MOVIE_BANNER_URL" -o banner.png || exit 3	# project banner

# find movies that have been removed

TMP=/tmp/$prog.catalog
ls -d catalog/* 2>/dev/null |
	sed 's:catalog/::' >$TMP

awk -v FS="	" '{print $1}' <index |
	sort |
	comm -23 $TMP - |
while read name
do
	echo "$prog:	removing old movie:	$name" 1>&2
	rm -rf catalog/"$name"
done

cat index |
while read line
do
	name=`echo "$line" | cut -f1 -d"	"`
	date=`echo "$line" | cut -f2 -d"	"`
	urlname=`echo "$name" | sed 's/ /%20/g'`

	if [ -d "catalog/$name" ]
	then
		curl -s $MOVIE_CATALOG_URL/$urlname/banner.png \
		    -o catalog/"$name"/banner.png || {
			echo "$prog:	banner missing" 1>&2
		}

		. ./"catalog/$name/info"
		if [ -n "$updated" ]
		then
			if [ -a "$updated" -ge "$date" ]
			then
				echo "$prog: $name	up to date" 1>&2
				continue
			fi
		fi
	fi

	if [ -n "$noupdate" ]
	then
		echo "$prog: $name	needs updating" 1>&2
		continue
	fi

	echo "$prog: $name	fetching..." 1>&2
	mkdir -p "catalog/$name"	|| exit 3
	rm -rf catalog/"$name"/*

	curl -s $MOVIE_CATALOG_URL/$urlname/info -o catalog/"$name"/info || {
		echo "$prog:	info missing, skipping" 1>&2
		continue
	}

	curl -s $MOVIE_CATALOG_URL/$urlname/video.mp4 -o catalog/"$name"/video.mp4 || {
		echo "$prog:	error, skipping" 1>&2
		continue
	}
done

du -sh $LOCAL_MOVIE_LIB

