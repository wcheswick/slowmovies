#!/bin/sh
#
prog=surfside
usage="usage: $prog [-r]"
#
#	Continue watching the beach at Surfside, very slowly
#
#	-r resets to the start

. slowdefs

exec 2>/tmp/surfside.err
set -x

case $1 in
-r)	echo 1 >$CURRENT_MOVIE
	echo 0 >$CURRENT_FRAME
	;;
"")	;;
*)	echo "$usage" 1>&2
	exit 1
esac


# We create and release a lot of image files, none of them precious.
# a small tmpfs in RAM should save the SSD drive a lot of wear if the
# Linux file cache was likely to fill up.

TMPDIR=/tmp/$prog;	export TMPDIR

if [ ! -d $TMPDIR ]
then
	mkdir $TMPDIR || exit 90
fi

cp /dev/null $TMPDIR/test || {
	sudo umount $TMPDIR
	sudo mount -t tmpfs -o size=30m tmpfs $TMPDIR
}

rootsize=`xdpyinfo | grep dimensions | awk '{print $2}' | sed 's/x/ /'`
echo "$prog:	rootsize: $rootsize" 1>&2

xrandr

set x $rootsize
shift
rootw=$1
rooth=$2

xset s off -dpms	# no automated screen blanking...we will do it, some day
#xset dpms force off	# turn off screen immediately

None () {
	true
}

Bye () {
	trap None INT TERM EXIT PIPE HUP KILL BUS ALRM QUIT SEGV ILL SYS IO
	#
	# PUT IN SOMETHING HERE TO RESTORE DESKTOP IMAGE ON EXIT
	#
	exit 0
}

trap Bye INT TERM EXIT PIPE HUP KILL BUS ALRM QUIT SEGV ILL SYS IO

if [ ! -s $MOVIE_LIST ]
then	# see what we have
	(cd $MOVIE_LIB
		ls |
		while read pn
		do
			if [ -d "$pn" ]
			then
				echo "$pn"
			fi
		done
	) >$MOVIE_LIST
	rm -f $CURRENT_MOVIE
fi

movie_count=`wc -l <$MOVIE_LIST | tr -d ' '`

while true		# loop through movies
do
	if [ ! -s $CURRENT_MOVIE ]
	then
		echo 1 >$CURRENT_MOVIE
	fi

	movie_index=`sed 1q $CURRENT_MOVIE`
	movie_name=`sed ${movie_index}q $MOVIE_LIST | tail -1`

	if [ ! -d "$MOVIE_LIB/$movie_name" ]
	then
		echo "$prog: cannot find movie at index $MOVIE_INDEX" 1>&2
		exit 10
	fi

	if [ ! -s "$CURRENT_REEL" ]
	then
		echo 1 >$CURRENT_REEL
	fi

	reel_index=`sed 1q $CURRENT_REEL`
	reel_list=`cd $MOVIE_LIB/$movie_name; ls *.mp4`
	reel_count=`echo "$reel_list" | wc -l | tr -d ' '`
	reels=`echo "$reel_list" | sed "${reel_index}"',$p'`

	while [ $reel_index -le $reel_count ]
	do
		echo "$prog:	showing $movie_name, reel $reel_index" 1>&2
		reel=`echo "$reel_list" | sed "${reel_index}q" | tail -1`
		if [ ! -s "$CURRENT_FRAME" ]
		then
			echo 0 >$CURRENT_FRAME
		fi
		frame=`sed 1q $CURRENT_FRAME`

		splitmovie -r 10 -s $frame $MOVIE_LIB/$movie_name/$reel $TMPDIR

		reel_index=`expr $reel_index + 1`
		echo "$reel_index" >$CURRENT_REEL
		rm -f $CURRENT_FRAME
	done
	rm -f $CURRENT_REEL

	movie_index=`expr $movie_index + 1`
	if [ $movie_index -gt $movie_count ]
	then
		movie_index=1
	fi
	echo "$movie_index" >$CURRENT_MOVIE
done |
while read fn frame_number	# each line contains a path name and a frame number
do
	# generate clock overlay
	time=`date +%H:%M`
	pbmtextps -font FreeSansBold -fontsize 72 "$time" |
	        pnmcrop -white  >$TMPDIR/clock.pbm

	# generate movie and url overlay
	bn=`basename $fn`
	info=`printf "Frame %d in movie '%s'      See http://cheswick.com/slowmovies/index.html" $frame_number $fn`
	pbmtextps -font FreeSansBold -fontsize 10 "$info" |
		pnmcrop -white |
		pnmmargin -white 4 >$TMPDIR/info.pbm

	case `uname` in
	Darwin)
		setwallpaper "$fn"
		;;
	Linux|FreeBSD)
		jpegtopnm <"$fn" 2>/dev/null	|
		pnmscale -xysize $rootw $rooth	|
		pnmcomp -xoff 30 -yoff 20 -invert \
			-alpha=$TMPDIR/clock.pbm $TMPDIR/clock.pbm |
		pnmcomp -align=right -valign=bottom -invert \
			-alpha=$TMPDIR/info.pbm $TMPDIR/info.pbm >$TMPDIR/image.ppm || exit 10

		display -window root -backdrop $TMPDIR/image.ppm
		;;
	*)
		echo "$prog: do not know how to display a slow movie on `uname`" 1>&2
		exit 2
	esac

	echo $frame_number >$CURRENT_FRAME
	rm -f "$fn"
done
