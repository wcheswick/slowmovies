#!/bin/sh
#
prog=playsm
usage="$prog [-l] [-r] {[-a] | m1 m2 ...| -i i1 i2 ...}"
#
#	Play a slow movie on the current machine.  There are a few styles:
#
#	desktop	desktop backround (x root, or equivalent)
#	full	full screen
#
#	We pick the best we can.
#
#	-a	play all slowmovies
#	-l	list available slowmovies, and exit
#	-r	play desired movies in random order


export PATH=$PATH:$HOME/bin

WRKDIR=${WRKDIR:-${TMPDIR}/${prog}}
CACHE=$WRKDIR/cache
mkdir -p $CACHE        || exit 100

case `uname` in
Linux)
	TMPDIR=${TMPDIR:-/var/tmp}
	style=desktop
	;;
Darwin)
	TMPDIR=${TMPDIR:-/var/tmp}
	style=appledesktop
	;;
FreeBSD)
	TMPDIR=${TMPDIR:-/var/tmp}
	style=desktop
	;;
*)		# just guessing here
	TMPDIR=${TMPDIR:-/var/tmp}
	style=desktop
esac

show_frame() { 
	local frame="$1"
	case "$style" in
	desktop)
		display -resize ${W}x${H} -backdrop -window root "$frame"
		;;
	appledesktop)
osascript <<!EOF
tell application "System Events"
	tell (every desktop)
		set picture rotation to 0
		set picture to POSIX file "$fn"
	end tell
end tell
!EOF
		;;
	full)
		#  not yet 
		;;
	esac
}

if which system_profiler >/dev/null
then	# macos
	screen=`system_profiler SPDisplaysDataType |
		grep Resolution |
		sed 1q`	# main screen only, for now
	W=`echo $screen | cut -f2 -d" "`
	H=`echo $screen | cut -f4 -d" "`
elif which xrdb >/dev/null
then
	screen=`xrdb -symbols -screen |
		egrep 'DWIDTH=|DHEIGHT=' |
		tr '\n' ' ' |
		sed 's/-[^=]*=//g'`
	W=`echo $screen | cut -f1 -d" "`
	H=`echo $screen | cut -f2 -d" "`
fi

. slowdefs	|| exit 99

cd $LOCAL_MOVIE_CATALOG
	grep 'updated=[0-9]' */info |
	sed 's:/.*$::' >$WRKDIR/available_movies

>$WRKDIR/toplay

randomize=
while [ $# -gt 0 ]
do
	case "$1" in
	-a)	cp $WRKDIR/available_movies $WRKDIR/toplay
		shift;;
	-i)	shift
		for i in $*
		do
			movie_name=`sed -n ${i}p <$WRKDIR/available_movies`
			if [ -n "$movie_name" ]
			then
				echo "$movie_name" >>$WRKDIR/toplay
			fi
		done
		break;;
	-l)	nl <$WRKDIR/available_movies
		exit 0
		;;
	-r)	randomize=true;
		shift;;
	-*)	echo "$usage" 1>&2
		exit 1;;
	*)	for i in "$@"
		do
			echo "$i" >>$WRKDIR/toplay
		done
		break
	esac
done

if [ -n "$randomize" ]
then
	awk <$WRKDIR/toplay '
		BEGIN {x = srand() }
			{print rand() "	" $0}
	' |
	sort -n |
	cut -d'	' -f2-
else
	cat $WRKDIR/toplay
fi | 
while read movie
do
pwd
	if [ ! -d "$movie" ]
	then
		echo "$prog: $movie	missing" 1>&2
		continue
	fi

	. "$movie"/info

	if [ -s "$movie"/banner.png ]
	then
		show_frame "$movie"/banner.png
	fi

	if [ ! -n "$spf" ]
	then
		spf=10		# default six frames per minute
	fi

	lastcached=`sed 1q $WRKDIR/lastcached 2>/dev/null`
	if [ ! -n "$lastcached" -o "$lastcached" != "$movie" ]
	then
# -codec copy 
		ffmpeg -hide_banner -v 8 -i "$movie"/video.* -qscale:v 2 \
				$CACHE/frame%09d.jpeg 2>/dev/null &&
			echo "$movie" >$WRKDIR/lastcached
	fi

	total_frames=`(cd $CACHE; ls | wc -l | tr -d ' ')`
	echo "`date +%'b %e %H:%m:%S'`	$title	spf:$spf	$total_frames total frames" | tee -a $LOG 

	(cd $CACHE; ls) |
	case "$first" in		# skip leading frames, if desired
	"")	cat -;;
	0)	cat -;;
	*)	sed 1,${first}d
	esac |
	case $count in		# limit frame count, if desired
	"")	cat -;;
	all)	cat -;;
	*)	sed -n 1,${count}p
	esac |
	while read frame
	do
		fn="$CACHE/$frame"
		show_frame "$fn"
		sleep $spf
	done

	shift
done
