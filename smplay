#!/bin/sh
#
prog=smplay
usage="$prog [-l] [-r] [-k] [-1] {[-a] | m1 m2 ...| {-i i1,i2,i3,...} }"
#
#	Play a slow movie on the current machine.
#
#	m1 m2 ... are movie names, directories in the slow_movies catalog
#	directory.  Alternatively, a list of numbers from the -l option
#	may be used.
#
#	There are a few styles for presentation envisioned, though only
#	one is implemented at the moment:
#
#	desktop	desktop backround (x root, or equivalent)
#	full	full screen window	(not available)
#
#	-a	play all slowmovies
#	-q	quiet: don't play audio, if present
#	-n	play only new or revised movies
#	-l	list available slowmovies, with their index entries, and exit
#	-r	play desired movies in random order
#	-k	kill any current smplayer on this machine

export PATH=$PATH:$HOME/bin

. smdefs	|| exit 99

mkdir -p ${WRKDIR}
>$WRKDIR/toplay

cd $LOCAL_MOVIE_CATALOG

grep '^updated=[0-9]' */info |
sed 's:/.*$::' >$WRKDIR/available_movies

randomize=
onlynew=
quiet=

while [ $# -gt 0 ]
do
	case "$1" in
	-a)	sort -u $WRKDIR/available_movies >$WRKDIR/toplay
		shift;;
	-i)	shift
		if [ $# -eq 0 ]
		then
			echo "$usage" 1>&2
			exit 1
		fi
		indexlist=`echo "$1" | tr ',' ' '`
		shift
		for i in $indexlist
		do
			movie_name=`sed -n ${i}p <$WRKDIR/available_movies`
			if [ -n "$movie_name" ]
			then
				echo "$movie_name"
			fi
		done | sort -u >$WRKDIR/toplay
		break;;
	-k)
		rm -f $WRKDIR/pid
		exit 0;;
	-l)	nl <$WRKDIR/available_movies
		exit 0
		;;
	-n)	onlynew=true
		shift;;
	-q)	quiet=true
		shift;;
	-r)	randomize=true
		shift;;
	-*)	echo "$usage" 1>&2
		exit 1;;
	*)	for i in "$@"
		do
			echo "$i"
		done | sort -u >$WRKDIR/toplay
		break
	esac
done

case `uname` in
Linux)
	smstyle=desktop
	;;
Darwin)
	smstyle=appledesktop
	;;
FreeBSD)
	smstyle=desktop
	;;
*)		# just guessing here
	smstyle=desktop
esac

if which system_profiler >/dev/null
then	# macos
	screen=`system_profiler SPDisplaysDataType |
		grep Resolution |
		sed 1q`	# main screen only, for now
	W=`echo $screen | cut -f2 -d" "`
	H=`echo $screen | cut -f4 -d" "`
elif which xrdb >/dev/null
then
	screen=`xrdb -symbols -screen |
		egrep 'DWIDTH=|DHEIGHT=' |
		tr '\n' ' ' |
		sed 's/-[^=]*=//g'`
	W=`echo $screen | cut -f1 -d" "`
	H=`echo $screen | cut -f2 -d" "`
fi

if [ -z "$W" -o -z "$H" ]
then
	log "$prog: screen information not available, aborting"
	exit 20
fi

show_frame() { 
	frame="$1"
	case "$smstyle" in
	desktop)	 #"display" is from imagemagick
		display -resize ${W}x${H} -backdrop -window root "$frame"
		true	# getting error return codes, but seems to be working.
		;;
	appledesktop)
		cp "$frame" $WRKDIR/apple_screen_frame
#		setwallpaper $WRKDIR/apple_screen_frame
		setwallpaper $frame
		;;
	full)
		#  not yet 
		;;
	esac
}

# only one player running, please

smplay_pid=`cat $WRKDIR/pid 2>/dev/null`
case "$smplay_pid" in
"")	;;
*)	npid=`ps -p $smplay_pid | sed -n '2,$p'`
	case "$rpid" in
	"")	# no longer running
		rm -f $WRKDIR/pid;;
	*)
		log "$prog:	already running"
		exit 1
	esac
esac

our_pid=$$
echo $our_pid >$WRKDIR/pid


(	cat $LOCAL_MOVIE_LIB/dontwatch 2>/dev/null
	if [ -n "$onlynew" ]
	then
		cat $LOCAL_MOVIE_LIB/viewed 2>/dev/null
	fi
) |
sort -u |
comm -23 $WRKDIR/toplay - >$WRKDIR/playlist

# set up small ramfs.  We are going to peel off individual frames
# from the incoming video and store them there.  Since the frames are ephemeral,
# ramfs is fast, small, and doesn't wear out an SSD.

RAM_CACHE=/tmp/smplay.cache
RAMFS_SIZE_MB=60

if [ ! -d $RAM_CACHE ]
then
	mkdir -m 0777 -p $RAM_CACHE
fi

case `uname` in
FreeBSD)
	if [ ! -d $RAM_CACHE/.snap ]	# need to create
	then
		log "$prog:	creating ram disk"
		sudo mdmfs -m 0 -p 0777 -s ${RAMFS_SIZE_MB}m md1 $RAM_CACHE || {
			log "$prog:	could not mount $RAM_CACHE ($?)"
			exit 4
		}
	else
		log "$prog:	ram disk already mounted, using it"
	fi
	;;
Linux)
	ls -la $RAM_CACHE 1>&2
	sudo mount -t tmpfs -o size=${RAMFS_SIZE_MB}m tmpfs $RAM_CACHE || {
		log "$prog:	could not mount $RAM_CACHE ($?)"
		exit 4
	}
	ls -la $RAM_CACHE 1>&2
	;;
Darwin)
	RAM_CACHE=/Volumes/${prog}RAMdisk
	if [ ! -d $RAM_CACHE ]
	then
		log "$prog:	Creating ramdisk"
		ramblocks=`expr ${RAMFS_SIZE_MB} \* 2048`
		diskutil erasevolume HFS+ `basename $RAM_CACHE` \
			`hdiutil attach -nomount ram://$ramblocks` >/dev/null || exit 99
	else
		log "$prog:	ramdisk already mounted"
	fi
	;;
*)
esac

# (RAM_CACHE directory is cleared by the split program)

if [ -n "$randomize" ]
then
	awk <$WRKDIR/playlist '
		BEGIN {x = srand() }
			{print rand() "	" $0}
	' |
	sort -n |
	cut -d'	' -f2-
else
	cat $WRKDIR/playlist
fi | 
while read movie	# run through our playlist
do
	log "$prog: $movie"
	if [ ! -d "$movie" ]
	then
		log "$prog:	missing"
		continue
	fi

	. "$movie"/info

	if [ -s "$movie/banner.png" ]
	then
		show_frame "$movie/banner.png"
	fi

	if [ ! -n "$spf" ]
	then
		spf=10		# default six frames per minute
	fi

	case "$count" in
	all)	count=0;;
	esac

	audio_pid=
	if [ -z "$quiet" -a -s "$movie"/audio.mp3 ]
	then
		while true
		do
			mpg123 -q "$movie"/audio.mp3
		done &
		audio_pid=$!
	fi

	smsplit -s $spf -f $first -c $count "$movie"/video.mp4 $RAM_CACHE |
	while read frame
	do
		if [ ! -s $WRKDIR/pid ]
		then
			log "$prog:	** terminated **"
			exit 9
		elif [ `sed 1q $WRKDIR/pid` != $our_pid ]
		then
			log "$prog:	** Terminated **"
			exit 9
		fi

		if [ -s "$frame" ]
		then
#			log "---- show_frame" "$frame"
			show_frame "$frame"	|| {
				log "$prog:	show_frame error ($?)"
				exit 99
			}
			cp $frame /tmp/lastframe.jpeg
			rm -f "$frame"
		else
			log "$prog:	frame missing: $frame"
		fi
	done

	log "$prog:	finished"
	echo "$movie" >>$LOCAL_MOVIE_LIB/viewed
done

log "$prog	exiting"
