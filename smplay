#!/bin/sh
#
prog=smplay
usage="$prog [-l] [-r] [-k] {[-a] | m1 m2 ...| -i i1,i2,i3,... }"
#
#	Play a slow movie on the current machine.  There are a few styles:
#
#	desktop	desktop backround (x root, or equivalent)
#	full	full screen
#
#	We pick the best we can.
#
#	-a	play all slowmovies
#	-n	play only new or revised movies
#	-l	list available slowmovies, and exit
#	-r	play desired movies in random order
#	-k	kill any current players on this machine

export PATH=$PATH:$HOME/bin

. smdefs	|| exit 99

mkdir -p ${WRKDIR}

. smsetup	|| exit 98


cd $LOCAL_MOVIE_CATALOG
	grep 'updated=[0-9]' */info |
	sed 's:/.*$::' >$WRKDIR/available_movies

>$WRKDIR/toplay

# only one player running, please

smplay_pid=`cat $WRKDIR/pid 2>/dev/null`
case "$smplay_pid" in
"")	;;
*)	npid=`ps -p $smplay_pid | sed -n '2,$p'`
	case "$rpid" in
	"")	# no longer running
		rm -f $WRKDIR/pid;;
	*)
		log "$prog:	already running"
		exit 1
	esac
esac

our_pid=$$
echo $our_pid >$WRKDIR/pid

randomize=
onlynew=

while [ $# -gt 0 ]
do
	case "$1" in
	-a)	sort -u $WRKDIR/available_movies >$WRKDIR/toplay
		shift;;
	-i)	shift
		indexlist=`echo "$1" | tr ',' ' '`
		shift
		for i in $indexlist
		do
			movie_name=`sed -n ${i}p <$WRKDIR/available_movies`
			if [ -n "$movie_name" ]
			then
				echo "$movie_name"
			fi
		done | sort -u >$WRKDIR/toplay
		break;;
	-k)
		rm -f $WRKDIR/pid
		exit 0;;
	-l)	nl <$WRKDIR/available_movies
		exit 0
		;;
	-n)	onlynew=true
		shift;;
	-r)	randomize=true
		shift;;
	-*)	echo "$usage" 1>&2
		exit 1;;
	*)	for i in "$@"
		do
			echo "$i"
		done | sort -u >$WRKDIR/toplay
		break
	esac
done

(	cat $LOCAL_MOVIE_LIB/dontwatch 2>/dev/null
	if [ -n "$onlynew" ]
	then
		cat $LOCAL_MOVIE_LIB/viewed 2>/dev/null
	fi
) |
sort -u |
comm -23 $WRKDIR/toplay - >$WRKDIR/playlist

# set up small ramfs if we can.  We are going to peel off individual frames
# from the incoming video and store them there.  Since they are very ephemeral,
# ramfs is fast, small, and doesn't wear out an SSD.

CACHE=/tmp/$prog.cache

RAMFS_SIZE_MB=60

case `uname` in
FreeBSD)
	if [ -d $CACHE ]
	then
		sudo umount $CACHE 2>/dev/null
	fi
	if [ ! -d $CACHE ]
	then
		mkdir -m 0777 -p $CACHE
		sudo mdmfs -m 0 -p 0777 -s ${RAMFS_SIZE_MB}m md1 $CACHE
	fi
	rm -f $CACHE/*
	;;
Linux)
	mkdir -m 0777 -p $CACHE
	sudo mount -t tmpfs -o size=${RAMFS_SIZE_MB}m tmpfs $CACHE
	rm -f $CACHE/*
	;;
Darwin)
	ramblocks=`expr ${RAMFS_SIZE_MB} * 2048`
	diskutil erasevolume HFS+ '{$prog}Cache' \
		`hdiutil attach -nomount ram://$ramblocks`
	ln -s /Volumes/${prog}Cache $CACHE
	;;
*)
esac


if [ -n "$randomize" ]
then
	awk <$WRKDIR/playlist '
		BEGIN {x = srand() }
			{print rand() "	" $0}
	' |
	sort -n |
	cut -d'	' -f2-
else
	cat $WRKDIR/playlist
fi | 
while read movie
do
	log "$prog: $movie"
	if [ ! -d "$movie" ]
	then
		log "$prog:	missing"
		continue
	fi

	. "$movie"/info

	if [ -s "$movie/banner.png" ]
	then
		show_frame "$movie/banner.png"
	fi

	if [ ! -n "$spf" ]
	then
		spf=10		# default six frames per minute
	fi

	case "$count" in
	all)	count=0;;
	esac

	smsplit -s $spf -f $first -c $count "$movie"/video.mp4 $CACHE |
	awk '{print $1}' |
	while read frame
	do
		if [ ! -s $WRKDIR/pid ]
		then
			log "$prog:	** terminated **"
			exit 9
		elif [ `sed 1q $WRKDIR/pid` != $our_pid ]
		then
			log "$prog:	** Terminated **"
			exit 9
		fi

		if [ -s $frame ]
		then
			echo "---- show_frame" "$frame"
			show_frame "$frame"	|| exit 99
			cp $frame /tmp/lastframe.pnm
			rm -f "$frame"
		else
			log "$prog:	frame missing: $frame"
		fi
	done

	log "$prog:	finished"
	echo "$movie" >>$LOCAL_MOVIE_LIB/viewed
done

log "$prog	exiting"
