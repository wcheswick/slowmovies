#!/bin/sh
#
prog=smupdate
usage="usage: $prog [-n] [-q <0-5>]"
#
#	Check the mother site for movies we don't have.
#
#	-n	compute changes, but do not make them
#	-q q	only fetch movies of quality "q" or better
#		0 = uninteresting tests, 5 = favorites

export PATH=$PATH:$HOME/bin

nochange=
q=
while [ $# -gt 0 ]
do
	case "$1" in
	-n)	shift; nochange=true;;
	-q)	shift; q=$1; shift;;
	-*)	echo "$usage" 1>&2
		exit 1;;
	*)	break
	esac
done

if [ $# -gt 0 ]
then
	echo "$usage" 1>&2
	exit 1
fi

. smdefs	|| exit 99

mkdir -p $WRKDIR        || exit 100
rm -rf $WRKDIR/*

cd $LOCAL_MOVIE_LIB	|| exit 1

# Use previous movie quality setting, or set default if none

case "$q" in	# determine movie quality
"")	if [ ! -s $LOCAL_MOVIE_QUALITY ]
	then
		echo "$DEFAULT_QUALITY" >$LOCAL_MOVIE_QUALITY
	fi
	;;

[0-5])	echo "$q"  >$LOCAL_MOVIE_QUALITY;;
*)
	echo "$usage" 1>&2
	exit 2
esac

q=`sed 1q $LOCAL_MOVIE_QUALITY`

echo "$prog:	movie quality setting is $q" 1>&2

curl -s "$MOVIE_INDEX_URL" -o index || exit 2	# our list of movies
curl -s "$MOVIE_BANNER_URL" -o banner.png || exit 3	# project banner

awk -v FS='	' -v q="$q" <index '
NF < 4 {	print; next}
{	quality=$4
	if (quality < q)
		next
	print
}' >$WRKDIR/interesting_index

# find movies that have been removed

ls -d catalog/* 2>/dev/null |
	sed 's:catalog/::' |
	sort >$WRKDIR/catalog

awk -v FS="	" '{print $1}' <$WRKDIR/interesting_index |
	sort |
	comm -23 $WRKDIR/catalog - |
while read name
do
	if [ -n "$nochange" ]
	then
		echo "$prog:	would remove movie:	$name" 1>&2
	else
# XXX maybe better not to delete movies that are just lower quality
		echo "$prog:	removing old movie:	$name" 1>&2
		rm -rf catalog/"$name"
	fi
done

needs_update() {
	if [ -z "$updated" ]
	then
		echo "unknown"
		return
	elif [ ! -s "catalog/$name/video.mp4" ]
	then
		echo "video file missing"
		return
	elif [ "$updated" -gt `file_mod_date "catalog/$name/video.mp4"` ]
	then
		echo "out of date"
		rm -f "catalog/$name/video.mp4" 
		return
#	elif [ "$updated" -lt "$date" ]
#	then
#		echo "out of date"
#		rm -f "catalog/$name/video.mp4" 
#		return
	elif [ "$video_size" -gt `file_size "catalog/$name/video.mp4"` ]
	then
		echo "video file partly downloaded"
		return
	elif [ "$video_size" -ne `file_size "catalog/$name/video.mp4"` ]
	then
		echo "video file wrong length"
		rm -f "catalog/$name/video.mp4" 
		return
	fi
	echo ""
}

needs_audio_update() {
	if [ -z "$audio_updated" ]
	then
		echo ""		# no audio supplied
		return
	elif [ ! -s "catalog/$name/audio.mp3" ]
	then
		echo "audio file missing"
		return
	elif [ "$updated" -gt `file_mod_date "catalog/$name/audio.mp3"` ]
	then
		echo "out of date"
		return
	elif [ "$audio_size" -gt `file_size "catalog/$name/audio.mp3"` ]
	then
		echo "audio file partly downloaded"
		return
	elif [ -n "$audio_size" -a \
		"$audio_size" -ne `file_size "catalog/$name/audio.mp3"` ]
	then
		echo "audio file wrong size"
		rm -f "catalog/$name/audio.mp3" 
		return
	fi
	echo ""
}

cat $WRKDIR/interesting_index |
while read line
do
	name=`echo "$line" | cut -f1 -d"	"`
	date=`echo "$line" | cut -f2 -d"	"`
	megabytes=`echo "$line" | cut -f3 -d"	"`
	quality=`echo "$line" | cut -f4 -d"	"`

	urlname=`echo "$name" | sed 's/ /%20/g'`

	if [ -d "catalog/$name" ]
	then
		rm -f info
		wget -q $MOVIE_CATALOG_URL/$urlname/info  || {
			echo "$prog:	info missing, skipping" 1>&2
			continue
		}
		. ./"catalog/$name/info"

		update_need=`needs_update`
		audio_update_need=`needs_audio_update`

		if [ -z "$update_need" -a -z "$audio_update_need" ]
		then
			echo "$prog: $name	up to date" 1>&2
			continue
		fi
	else
		update_need="movie unknown"
	fi

	if [ -n "$nochange" ]
	then
		need="$update_need"
		if [ -z "$need" ]
		then
			need="$audio_update_need"
		fi
		
		echo "$prog: $name	needs update ($need)" 1>&2
exit 13
		continue
	fi

	if [ -n "$update_need" ]
	then
		echo "$prog: $name	fetching..." 1>&2
		mkdir -p "catalog/$name"	|| exit 3
		(cd "catalog/$name"
			rm -f banner.png
			wget -q $MOVIE_CATALOG_URL/$urlname/banner.png  || {
				echo "$prog:	banner missing" 1>&2
			}
	
			wget -q -c $MOVIE_CATALOG_URL/$urlname/video.mp4  || {
				echo "$prog:	error, skipping" 1>&2
				continue
			}
			touch video.mp4

			rm -f info
			wget -q $MOVIE_CATALOG_URL/$urlname/info || {
				echo "$prog:	info missing, skipping update" 1>&2
				continue
			}
		)
	elif [ -n "$audio_update_need" ]
	then
		echo "$prog: $name	updating audio	$audio_update_need" 1>&2	
		(cd "catalog/$name"
			wget -q -c  $MOVIE_CATALOG_URL/$urlname/audio.mp3  || {
				echo "$prog:	audio update failed" 1>&2
			}
		)
	fi
done

du -sh $LOCAL_MOVIE_LIB

